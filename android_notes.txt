1. Android Studio Quick Short
Ctrl + shift + A    search command
Ctrl + F 			search in the current file
Ctrl + Shift + F	search any string in whole project

Ctrl + H			class hierarchy
Ctrl + F12			list outline of current file
Ctrl + B			declaration of class, method, variable somewhere used in the code

Ctrl + O			override method
Ctrl + Q			quick document

Alt + Left          navigation: back
Alt + right         navigation: forward

Ctrl + Shift + 	Space 	SmartType code completion

File -> Settings -> KeyMap
File -> Settings -> Editor -> General -> Auto Import -> Java

Select your project -> right click -> Optimize Imports


2. Notes
1) gradle 'compile' configuration is now deprecated and should be replaced by "implementation" or "api"
2）SDCard权限
   <uses-permission android:name="android.permission.MOUNT_UNMOUNT_FILESYSTEMS"/>	// 创建删除文件权限
   <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>		// 写权限
   <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>		// 读权限
   注意：
   1）fopen在某些目录下可读写文件，但不能创建文件；而在Environment.getExternalStorageDirectory()返回的目录下可创建文件。
   2）app安装后，某些权限缺省被限制（比如xiaomi手机），可通过"Settings"应用修改

3）设置log输出级别
   adb shell setprop log.tag.<YourTag> <Level>
   其中：
   <YourTag>: log tag
   <Level>: VERBOSE, DEBUG, INFO, WARN, ERROR, ASSERT, or SUPPRESS
   例子
   adb shell setprop log.tag.MyAppTag DEBU
   adb shell getprop log.tag.MyAppTag
   注：也可通过System.setProperty()编程方式设置？
   

3. 设置代理
<project-root>/gradle.properties中添加（如下例所示）

#http proxy setup
systemProp.http.proxyHost=www.somehost.org
systemProp.http.proxyPort=8080
systemProp.http.proxyUser=userid
systemProp.http.proxyPassword=password
systemProp.http.nonProxyHosts=*.nonproxyrepos.com|localhost

#https proxy setup
systemProp.https.proxyHost=www.somehost.org
systemProp.https.proxyPort=8080
systemProp.https.proxyUser=userid
systemProp.https.proxyPassword=password
systemProp.https.nonProxyHosts=*.nonproxyrepos.com|localhost

参考: https://docs.gradle.org/current/userguide/build_environment.html#sec:accessing_the_web_via_a_proxy


4. 命令行Build App
cd <project-root>
./gradlew <task>				// Build某个task
./gradlew tasks					// 查看所有task
./gradlew assembleDebug			// Build Debug版本apk（生成的apk路径：<project-root>/app/outputs/apk/debug/xxx.apk）
./gradlew assembleRelease		// Build Release版本apk（生成的apk路径：<project-root>/app/outputs/apk/release/xxx.apk）
./gradlew --help				// 查看帮助
注：阅读gradlew脚本的源码，某些环境变量，如：JAVA_HOME需要设置正确: 应该设置成JDK目录（而不是JRE目录）

  
5. sdkmanager
sdkmanager是一个命令行工具（<android_sdk>/tools/bin/）

List installed and available packages
sdkmanager --list [options]							// 列出所有已安装的和可用的packages

sdkmanager <packages> [options]						// 安装packates, 所有packet以空格分隔，如：sdkmanager "platform-tools" "platforms;android-26"
													// 注：通过--list可以查看可用的packets, 每个packet要用双引号括起来
												
sdkmanager --package_file=package_file [options]	// 提供一个txt文件指定要安装哪些包
												
sdkmanager --uninstall packages [options]			// 卸载packets
sdkmanager --uninstall --package_file=package_file [options]
sdkmanager --update [options]						// 更新所有已安装packsts


其中，[options]：
--sdk_root=path	 				指定SDK path（缺省通过sdkmanager路径来决定）
--channel=channel_id			包括直到channel_id的packages，可用的channel_id: 0 (Stable), 1 (Beta), 2 (Dev), and 3 (Canary).
--include_obsolete				包括obsolete packages（仅配合--list 和--update使用）.
--no_https						强制所有connections使用HTTP（不使用HTTPS）.
--verbose						Errors, warnings和informational都会打印
--proxy={http | socks}			指定代理类型：如http -- HTTP、FTP, socks -- SOCKS (V4 or V5)
--proxy_host={IP_address | DNS_address}		代理主机
--proxy_port=port_number					代理端口



6. android development issues:
1) Full screen
requestWindowFeature(Window.FEATURE_NO_TITLE);
getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
    WindowManager.LayoutParams.FLAG_FULLSCREEN);

2) Layout
ConstraintLayout: 近似RelativeLayout（通过view之间，view与parent之间关系布局），但更灵活。

3）Update widge Notes
Set/Update widge should in Main/UI thread.

